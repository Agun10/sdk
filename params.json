{"name":"Botan.io","tagline":"Advanced analytics for your Telegram bot","body":"#Botan SDK\r\n\r\n[Botan](http://botan.io) is a telegram bot analytics system based on [Yandex.Appmetrica](http://appmetrica.yandex.com/).\r\nIn this document you can find how to setup Yandex.Appmetrica account, as well as examples of Botan SDK usage.\r\n\r\n\r\n## Creating an account\r\n * Register at http://appmetrica.yandex.com/\r\n * After registration you will be prompted to create Application. Please use @YourBotName as a name.\r\n * Save an API key from settings page, you will use it as a token for Botan API calls.\r\n * Download lib for your language, and use it as described below. Don`t forget to insert your token!\r\n\r\nSince we are only getting started, you may discover that some existing reports in AppMetri—Åa aren't properly working for Telegram bots, like Geography, Gender, Age, Library, Devices, Traffic sources and Network sections. We will polish that later.\r\n\r\n## SDK usage\r\nWe have libraries for the following languages:\r\n * [Go](#go)\r\n * [Java](#java)\r\n * [JavaScript](#js)\r\n * [PHP](#php)\r\n * [Python](#py)\r\n * [Ruby](#ruby)\r\n * [Rust](#rust)\r\n\r\nMore languages (C++, Scala, etc.) are coming soon.\r\n\r\nAlternatively, you can use Botan API via [plain HTTP calls](#http).\r\n\r\n\r\n## <a name=\"js\"></a>JavaScript example\r\nInstall npm: `npm install botanio`\r\n```js\r\nvar botan = require('botanio')(token);\r\n\r\nbotan.track(message, 'Start');\r\n```\r\n\r\n## <a name=\"py\"></a>Python example\r\nYou need to install requests library to use python botan lib.\r\nYou can do it with\r\n\r\n\tpip install requests\r\n\r\nCode:\r\n\r\n\timport botan\r\n\ttoken = 1\r\n\tuid = 2\r\n\tmessageDict = {}\r\n\tprint botan.track(token, uid, messageDict, 'Search')\r\n\r\nIt's necessary to pass `uid` (user id you get from Telegram) into python lib calls.\r\n\r\n## <a name=\"php\"></a>PHP example\r\nYou need to put the class in a convenient place.\r\n```php\r\nprivate $token = 'token';\r\n\r\npublic function _incomingMessage($message_json) {\r\n    $messageObj = json_decode($message_json, true);\r\n    $messageData = $messageObj['message'];\r\n\r\n    $botan = new Botan($this->token);\r\n    $botan->track($messageData, 'Start');\r\n}\r\n```\r\n\r\n## <a name=\"ruby\"></a>Ruby example\r\n`uid` is a user id you get from Telegram.\r\n\r\n\trequire_relative 'botan'\r\n\ttoken = 1111\r\n\tuid = 1\r\n\tmessage = { text: 'text' }\r\n\tputs Botan.track(token, uid, message, 'Search')\r\n\r\n## <a name=\"rust\"></a>Rust example\r\n\r\n```rust\r\n\r\nextern crate rustc_serialize;\r\n\r\nextern crate botanio;\r\n\r\nuse botanio::{Botan};\r\n\r\n#[derive(Debug, RustcEncodable)]\r\nstruct Message {\r\n    some_metric: u32,\r\n    another_metric: u32,\r\n}\r\n\r\nfn main() {\r\n    let token = \"1111\";\r\n    let uid = 1;\r\n    let name = \"Search\";\r\n    let message = Message {some_metric: 100, another_metric: 500};\r\n\r\n    let botan = Botan::new(token);\r\n    botan.track(uid, &message, name).unwrap();\r\n}\r\n```\r\n\r\n## <a name=\"java\"></a>Java example\r\n\r\n```java\r\ntry (CloseableHttpAsyncClient client = HttpAsyncClients.createDefault()) {\r\n    client.start();\r\n    Botan botan = new Botan(client, new ObjectMapper());\r\n    botan.track(\"1111\", \"1\", ImmutableMap.of(\"some_metric\": 100, \"another_metric\": 500), \"Search\").get();\r\n}\r\n```\r\n\r\n## <a name=\"go\"></a>Go example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"github.com/botanio/sdk/go\"\r\n)\r\n\r\ntype Message struct {\r\n\tSomeMetric    int\r\n\tAnotherMetric int\r\n}\r\n\r\nfunc main() {\r\n\tch := make(chan bool) // Channel for synchronization\r\n\r\n\tbot := botan.New(\"1111\")\r\n\tmessage := Message{100, 500}\r\n\r\n\t// Asynchronous track example\r\n\tbot.TrackAsync(1, message, \"Search\", func(ans botan.Answer, err []error) {\r\n\t\tfmt.Printf(\"Asynchonous: %+v\\n\", ans)\r\n\t\tch <- true // Synchronization send\r\n\t})\r\n\r\n\t// Synchronous track example\r\n\tans, _ := bot.Track(1, message, \"Search\")\r\n\tfmt.Printf(\"Synchronous: %+v\\n\", ans)\r\n\r\n\t<-ch // Synchronization receive\r\n}\r\n```\r\n\r\n## <a name=\"http\"></a>HTTP API\r\nThe base url is: https://api.botan.io/track\r\n\r\nYou can put data to Botan using POST method.\r\n\r\nThe url should look like https://api.botan.io/track?token=API_KEY&uid=UID&name=EVENT_NAME\r\n\r\nPlease provide a json document as the post body.\r\n\r\nAPI response is a json document:\r\n\r\n* on success: {\"status\": \"accepted\"}\r\n* on failure: {\"status\": \"failed\"} or {\"status\": \"bad request\", \"info\": \"some_additional_info_about_error\"}\r\n\r\n##Contribution\r\nWe are welcome any contributions as pull-requests!\r\n\r\nFeel free to write more libraries for the languages we are not supporting yet.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}